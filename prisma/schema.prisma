// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "cockroachdb"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id          String    @id @default(cuid())
  email       String    @unique
  firstName   String?
  lastName    String?
  password    String
  designation String
  role        String    @default("USER")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  projects    Project[]
}

model Supplier {
  id           String     @id @default(cuid())
  name         String
  address      String
  phone        String
  supplierType String
  markup       String
  email        String     @unique
  notes        String?
  material     Material[]
}

model SubContractor {
  id                   String    @id @default(cuid())
  name                 String
  email                String    @unique
  address              String
  phone                String
  dateOfBirth          DateTime
  applicantType        String
  approxTeamSize       String
  dailyRate            String
  areasOfWork          String
  taxStatus            String
  tools                String[]
  transport            String[]
  licence              String[]
  experienceType       String[]
  experiencePartitions String[]
  notes                String?
  subTasks             SubTask[]
}

model Project {
  id                String        @id @default(cuid())
  projectId         Int           @default(sequence())
  name              String
  location          String
  startDate         DateTime
  endDate           DateTime
  projectManager    String
  contactPerson     String
  phone             String
  user              User          @relation(fields: [projectManager], references: [id])
  clientId          String
  client            Client        @relation(fields: [clientId], references: [id])
  materialMarkUp    String
  SubTask           SubTask[]
  Material          Material[]
  status            PROJECTSTATUS @default(PENDING)
  totalAmount       Int           @default(0)
  remainingAmount   Int           @default(0)
  qutationGenerated Boolean       @default(false)
  Invoice           Invoice[]
  documents         documents[]
}

model documents {
  id        String   @id @default(cuid())
  name      String
  url       String
  Project   Project? @relation(fields: [projectId], references: [id])
  projectId String?
}

enum PROJECTSTATUS {
  ACTIVE
  PENDING
  APPROVED
  COMPLETED
  REJECTED
}

model Client {
  id       String    @id @default(cuid())
  clientId Int       @default(sequence())
  name     String
  email    String    @unique()
  phone    String
  location String
  project  Project[]
  Invoice  Invoice[]
}

model SubTask {
  id                 String        @id @default(cuid())
  taskId             Int           @default(sequence())
  name               String
  description        String
  assingTo           String
  subContactor       SubContractor @relation(fields: [assingTo], references: [id])
  startDate          DateTime
  endDate            DateTime
  cost               Int
  vat                Int
  Project            Project?      @relation(fields: [projectId], references: [id])
  projectId          String?
  workorderGenerated Boolean       @default(false)
}

model Material {
  id                      String   @id @default(cuid())
  material                String
  requireFor              String
  supplierId              String
  quantity                Int
  unit                    String
  price                   Float
  vat                     Int
  totalCost               Float
  supplierReuestGenerated Boolean  @default(false)
  supplier                Supplier @relation(fields: [supplierId], references: [id])
  Project                 Project? @relation(fields: [projectId], references: [id])
  projectId               String?
}

model Invoice {
  id          String        @id @default(cuid())
  InvoiceId   Int           @default(sequence())
  clientId    String
  client      Client        @relation(fields: [clientId], references: [id])
  Project     Project?      @relation(fields: [projectId], references: [id])
  projectId   String?
  dueDate     DateTime
  createdDate DateTime
  Amount      Int
  remarks     String
  status      invoiceStatus @default(UNPAID)
}

enum invoiceStatus {
  UNPAID
  PAID
}
